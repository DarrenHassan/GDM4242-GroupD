
//Sample the luminance of the source image using a kernal of sample
//points, and return a scaled image containing the log() of averages
half4 sampleLuminanceInitial(
	uniform half2 sampleOffsets[9],
	half2 uv : TEXCOORD0,
	uniform sampler2D tex : register(s0)
    ) : COLOR
{
	const half3 luminanceVector = half3(0.2125f, 0.7154f, 0.0721f);

	half sum = 0.0f;
	for(int n = 0; n < 9; n++)
	{
		// Compute the sum of log(luminance) throughout the sample points
		half3 sample = tex2D(tex, uv + sampleOffsets[n]);
		sum += log(dot(sample, luminanceVector) + .0001f);
	}
	// Divide the sum to complete the average
	sum /= 9;
	return half4(sum, sum, sum, 1.0f);
}


//Scale down the luminance texture by blending sample points
half4 sampleLuminanceIterative(
	uniform half2 sampleOffsets[16],
	half2 uv : TEXCOORD0,
	uniform sampler2D tex : register(s0)
	) : COLOR
{
	half sum = 0.0f; 
	// Compute the sum of luminance throughout the sample points
	for(int n = 0; n < 16; n++)
		sum += tex2D(tex, uv + sampleOffsets[n]).r;
	// Divide the sum to complete the average
	sum /= 16;
	return half4(sum, sum, sum, 1.0f);
}

//Extract the average luminance of the image by completing the averaging
//and taking the exp() of the result
half4 sampleLuminanceFinal(
	uniform half2 sampleOffsets[16],
	half2 uv : TEXCOORD0,
	uniform sampler2D tex : register(s0)
	) : COLOR
{
	half sum = 0.0f;
	// Compute the sum of luminance throughout the sample points
	for(int n = 0; n < 16; n++)
		sum += tex2D(tex, uv + sampleOffsets[n]).r;
	// Divide the sum to complete the average, and perform an exp() to complete
	// the average luminance calculation
	sum = exp(sum / 16);
	return half4(sum, sum, sum, 1.0f);
}

//Bright pass
half4 brightPass(
	uniform half brightThreshold,
	uniform half2 sampleOffsets[16],
	half2 uv : TEXCOORD0,
	uniform sampler2D sourceTexture : register(s0),
	uniform sampler2D luminanceTexture : register(s1)
	) : COLOR
{
	//downScale4x4
	half4 sample = half4(0,0,0,0);
	for(int n = 0; n < 16; n++)
		sample += tex2D(sourceTexture, uv + sampleOffsets[n]);
	sample /= 16;

	//BrightPass filter
	half adaptedLuminance = tex2D(luminanceTexture, half2(.5f, .5f)).r;

	//half middleGray = .5f;
	//// Determine what the pixel's value will be after tone mapping occurs
	//sample.rgb *= middleGray / (adaptedLuminance + .001f);
	
	// Subtract out dark pixels
	sample.rgb -= brightThreshold;
	
	// Clamp to 0
	sample = max(sample, 0.0f);
	
	// Map the resulting value into the 0 to 1 range. Higher values for
	// brightOffset will isolate lights from illuminated scene 
	// objects.
	const half brightOffset = 1.0f; // Offset for BrightPass filter
	sample.rgb /= (brightOffset + sample.rgb);

	return sample;
}

half4 gaussianBlur5x5(
	uniform half2 sampleOffsets[13],
	uniform half4 sampleWeights[13],	
	half2 uv : TEXCOORD0,
	uniform sampler2D sourceTexture : register(s0)
	) : COLOR
{
	half4 sample = half4(0,0,0,0);
	for(int n = 0; n < 13; n++)
	{
		half4 color = tex2D(sourceTexture, uv + sampleOffsets[n]);
		sample += sampleWeights[n] * color;
	}
	return sample;
}

//Bloom, requires offsets and weights to be provided externally
half4 bloom(
	uniform half2 sampleOffsets[15],
	uniform half4 sampleWeights[15],	
	half2 uv : TEXCOORD0,
	uniform sampler2D sourceTexture : register(s0)
	) : COLOR
{
	half4 sample = half4(0,0,0,0);
	for(int n = 0; n < 15; n++)
	{
		half4 color = tex2D(sourceTexture, uv + sampleOffsets[n]);
		sample += sampleWeights[n] * color;
	}
	return sample;
}

//Calculate the luminance that the camera is current adapted to, using
//the most recented adaptation level, the current scene luminance, and
//the time elapsed since last calculated
float4 calculateAdaptedLuminance(
	uniform float adaptationMinimum,
	uniform float adaptationMaximum,
	uniform float adaptationVelocity,
	uniform float elapsedTime,
	float2 uv : TEXCOORD0,
	uniform sampler2D lastLuminanceTexture : register(s0),
	uniform sampler2D toneMapTexture : register(s1)
	) : COLOR
{
	float adaptedLuminance = tex2D(lastLuminanceTexture, float2(.5f, .5f)).r;
	float currentLuminance = tex2D(toneMapTexture, float2(.5f, .5f)).r;

	// The user's adapted luminance level is simulated by closing the gap between
	// adapted luminance and current luminance. This is not an accurate model 
	// of human adaptation, which can take longer than half an hour.
	float newLuminance = adaptedLuminance + (currentLuminance - adaptedLuminance) * 
		(1.0f - pow(0.98f, adaptationVelocity * 20 * elapsedTime));

	newLuminance = clamp(newLuminance, adaptationMinimum, adaptationMaximum);

	return float4(newLuminance, newLuminance, newLuminance, 1.0f);
}

//Copy last adapted luminance
float4 copyLastAdaptedLuminance(
	uniform sampler2D luminanceTexture : register(s0)
	) : COLOR
{
	return tex2D(luminanceTexture, float2(.5f, .5f));
}

//Final scene composition, with tone mapping
half4 finalToneMapping(
	uniform half adaptationMiddleBrightness,
	uniform half bloomScale,
	half2 uv : TEXCOORD0,
	uniform sampler2D sceneTexture : register(s0),
	uniform sampler2D bloomTexture : register(s1),
	uniform sampler2D adaptedLuminanceTexture : register(s2)
	) : COLOR
{
	half3 color = half3(0,0,0);

	// Scene color (with tone mapping)
	half3 sceneColor = tex2D(sceneTexture, uv).rgb;

	half adaptedLuminance = tex2D(adaptedLuminanceTexture, half2(.5f, .5f)).r;
	sceneColor *= adaptationMiddleBrightness / (adaptedLuminance + .001f);
	//sceneColor /= (1.0f + sceneColor);

	color += sceneColor;

	// Bloom color
	half3 bloom = tex2D(bloomTexture, uv).rgb;
	color += bloom * bloomScale;

	return half4(color, 1.0f);
}
