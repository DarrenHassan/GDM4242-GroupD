<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EntitySystem</name>
    </assembly>
    <members>
        <member name="T:Engine.EntitySystem.EntityType">
            <summary>
            Defines the base class for entity types.
            </summary>
        </member>
        <member name="M:Engine.EntitySystem.EntityType.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:Engine.EntitySystem.EntityType"/>.
            </summary>
        </member>
        <member name="M:Engine.EntitySystem.EntityType.OnLoad(Engine.Utils.TextBlock)">
            <summary>
            Called when the type during loading.
            </summary>
            <param name="block">The text block in which data of type will be loaded.</param>
            <returns><b>true</b> if the data are correct; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Engine.EntitySystem.EntityType.OnLoaded">
            <summary>
            Called when the type is loaded.
            </summary>
        </member>
        <member name="M:Engine.EntitySystem.EntityType.OnSave(Engine.Utils.TextBlock)">
            <summary>
            Called when the type during saving.
            </summary>
            <param name="block">The text block in which data of type will be saved.</param>
            <returns><b>true</b> if the data are correct; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Engine.EntitySystem.EntityType.ToString">
            <summary>
            Returns a string containing the type class name and name of the entity type.
            </summary>
            <returns>Returns a string containing the type class name and name of the entity type.</returns>
        </member>
        <member name="M:Engine.EntitySystem.EntityType.OnIsExistsReferenceToObject(System.Object)">
            <summary>
            Whether to check up there is a link to object.
            </summary>
            <remarks>
            This method it is necessary to redirect to all of you created 
            <b>MapObject.MapObjectCreateObjectCollection</b> objects and 
            for all custom not serializable <b>EntityType</b> fields. 
            It is necessary for normal work of Resource Editor.
            </remarks>
            <param name="obj">The cheched object.</param>
            <returns><b>true</b> if a link to object is exists; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Engine.EntitySystem.EntityType.OnChangeReferencesToObject(System.Object,System.Object)">
            <summary>
            Replaces the link of all objects to another.
            </summary>
            <remarks>
            This method it is necessary to redirect to all of you created 
            <b>MapObject.MapObjectCreateObjectCollection</b> objects and 
            for all custom not serializable <b>EntityType</b> fields. 
            It is necessary for normal work of Resource Editor.
            </remarks>
            <param name="obj">The source link to object.</param>
            <param name="newValue">The new link to object.</param>
        </member>
        <member name="P:Engine.EntitySystem.EntityType.ClassInfo">
            <summary>
            Gets the class information of type.
            </summary>
        </member>
        <member name="P:Engine.EntitySystem.EntityType.Name">
            <summary>
            Gets the name of type.
            </summary>
        </member>
        <member name="P:Engine.EntitySystem.EntityType.FullName">
            <summary>
            Gets or sets the full name of type.
            </summary>
        </member>
        <member name="P:Engine.EntitySystem.EntityType.FilePath">
            <summary>
            Gets the file path of the .type file, which defines the given type.
            </summary>
            <remarks>
            If type to create manually file path it will be empty.
            </remarks>
        </member>
        <member name="P:Engine.EntitySystem.EntityType.AllowEditorCreate">
            <summary>
            Gets or sets a value indicating whether the entity can created from the Map Editor.
            </summary>
        </member>
        <member name="P:Engine.EntitySystem.EntityType.AllowEmptyName">
            <summary>
            Gets or sets a value indicating whether the entity can have a name.
            </summary>
            <seealso cref="P:Engine.EntitySystem.Entity.Name"/>
        </member>
        <member name="P:Engine.EntitySystem.EntityType.NetworkType">
            <summary>
            Gets or sets a value indicating the network type of entity.
            </summary>
        </member>
        <member name="P:Engine.EntitySystem.EntityType.UniqueEntityInstance">
            <summary>
            Gets or sets a value indicating whether to be created some instances of this type.
            </summary>
            <remarks>
            This value is applied, when it is necessary to forbid creation more one instance.
            This value is convenient for using to control users at creation of entities in the Map Editor.
            For example the given property is used <b>MapSystem.Collision</b> which one can be only on all map.
            </remarks>
        </member>
        <member name="P:Engine.EntitySystem.EntityType.ManualCreated">
            <summary>
            Gets or sets a value indicating whether the type manually is created.
            </summary>
        </member>
        <member name="T:Engine.EntitySystem.EntityType.FieldSerializeAttribute">
            <summary>
            Specifies that a field will be serialized. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Engine.EntitySystem.EntityType.FieldSerializeAttribute.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <remarks>
            The property name will be taken by Reflection from property. If it will be used obfuscator there can be problems with renamed names of properties later.
            </remarks>
        </member>
        <member name="M:Engine.EntitySystem.EntityType.FieldSerializeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="propertyName">The property name.</param>
        </member>
        <member name="P:Engine.EntitySystem.EntityType.FieldSerializeAttribute.PropertyName">
            <summary>
            Gets the property name.
            </summary>
        </member>
        <member name="T:Engine.EntitySystem.LogicComponent">
            <summary>
            Defines the base logic component class for logic classes.
            </summary>
        </member>
        <member name="T:Engine.EntitySystem.Entity">
            <summary>
            Defines the base class for entities.
            </summary>
        </member>
        <member name="M:Engine.EntitySystem.Entity.SetDeleted">
            <summary>
            Deletes entity from the world.
            </summary>
            <remarks>
            <para>This method differs from method <see cref="M:Engine.EntitySystem.Entity.SetShouldDelete"/>, that the entity at once will be removed.</para>
            </remarks>
        </member>
        <member name="M:Engine.EntitySystem.Entity.SetShouldDelete">
            <summary>
            It is informed entity on that that he should be soon deleted.
            </summary>
            <remarks>
            <para>This method differs from method <see cref="M:Engine.EntitySystem.Entity.SetDeleted"/>, that the object can delete itself a little bit later. It is convenient, when the object before delete should make something during some time.</para>
            </remarks>
        </member>
        <member name="M:Engine.EntitySystem.Entity.OnShouldDelete">
            <summary>
            Called when the method <see cref="M:Engine.EntitySystem.Entity.SetShouldDelete"/> is called.
            </summary>
            <returns>Returns <b>true</b> the entity will be deleted; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Engine.EntitySystem.Entity.OnNameChange">
            <summary>
            Called when the <see cref="P:Engine.EntitySystem.Entity.Name"/> of entity is changed.
            </summary>
        </member>
        <member name="M:Engine.EntitySystem.Entity.AddRelationship(Engine.EntitySystem.Entity)">
            <summary>
            Creates relationship with other entity.
            </summary>
            <param name="entity">The other entity.</param>
            <seealso cref="M:Engine.EntitySystem.Entity.RemoveRelationship(Engine.EntitySystem.Entity)"/>
            <seealso cref="M:Engine.EntitySystem.Entity.OnRelatedEntityDelete(Engine.EntitySystem.Entity)"/>
            <seealso cref="M:Engine.EntitySystem.Entity.OnRelationshipAdd(Engine.EntitySystem.Entity)"/>
            <seealso cref="M:Engine.EntitySystem.Entity.OnRelationshipRemove(Engine.EntitySystem.Entity)"/>
            <seealso cref="E:Engine.EntitySystem.Entity.RelatedEntityDelete"/>
        </member>
        <member name="M:Engine.EntitySystem.Entity.RemoveRelationship(Engine.EntitySystem.Entity)">
            <summary>
            Breakes off relationship with other entity.
            </summary>
            <param name="entity">The other entity.</param>
            <seealso cref="M:Engine.EntitySystem.Entity.AddRelationship(Engine.EntitySystem.Entity)"/>
            <seealso cref="M:Engine.EntitySystem.Entity.OnRelatedEntityDelete(Engine.EntitySystem.Entity)"/>
            <seealso cref="M:Engine.EntitySystem.Entity.OnRelationshipAdd(Engine.EntitySystem.Entity)"/>
            <seealso cref="M:Engine.EntitySystem.Entity.OnRelationshipRemove(Engine.EntitySystem.Entity)"/>
            <seealso cref="E:Engine.EntitySystem.Entity.RelatedEntityDelete"/>
        </member>
        <member name="M:Engine.EntitySystem.Entity.PostCreate">
            <summary>
            Adds entity in the world. This method is necessary call after entity is created and parameters are set.
            </summary>
            <example>This example shows creation of entity and his addition in the world.
            <code>
            MapObject obj = (MapObject)Entities.Instance.Create( "Box", Map.Instance );
            obj.Position = new Vec3( 0, 0, 10 );
            obj.PostCreate();
            </code>
            </example>
            <seealso cref="M:Engine.EntitySystem.Entities.Create(Engine.EntitySystem.EntityType,Engine.EntitySystem.Entity)"/>
            <seealso cref="M:Engine.EntitySystem.Entities.Create(System.String,Engine.EntitySystem.Entity)"/>
            <seealso cref="M:Engine.EntitySystem.Entity.OnPreCreate"/>
            <seealso cref="M:Engine.EntitySystem.Entity.OnCreate"/>
            <seealso cref="M:Engine.EntitySystem.Entity.OnPostCreate(System.Boolean)"/>
            <seealso cref="E:Engine.EntitySystem.Entity.PostCreated"/>
        </member>
        <member name="M:Engine.EntitySystem.Entity.OnCreate">
            <summary>
            Called after the entity is created in the world.
            </summary>
            <remarks>
            <para>This method is not called if the entity is loaded.</para>
            </remarks>
            <seealso cref="M:Engine.EntitySystem.Entity.OnPreCreate"/>
            <seealso cref="M:Engine.EntitySystem.Entity.OnPostCreate(System.Boolean)"/>
            <seealso cref="M:Engine.EntitySystem.Entity.PostCreate"/>
            <seealso cref="E:Engine.EntitySystem.Entity.Create"/>
        </member>
        <member name="M:Engine.EntitySystem.Entity.OnPreCreate">
            <summary>
            Called when entity is created.
            </summary>
            <seealso cref="M:Engine.EntitySystem.Entity.OnCreate"/>
            <seealso cref="M:Engine.EntitySystem.Entity.OnPostCreate(System.Boolean)"/>
            <seealso cref="M:Engine.EntitySystem.Entity.PostCreate"/>
        </member>
        <member name="M:Engine.EntitySystem.Entity.OnPostCreate(System.Boolean)">
            <summary>
            Called after the entity is added into the world.
            </summary>
            <param name="loaded"><b>true</b> if the entity has been loaded; otherwise, <b>false</b>.</param>
            <seealso cref="M:Engine.EntitySystem.Entity.PostCreate"/>
            <seealso cref="M:Engine.EntitySystem.Entity.OnPostCreate2(System.Boolean)"/>
        </member>
        <member name="M:Engine.EntitySystem.Entity.OnPostCreate2(System.Boolean)">
            <summary>
            Called after the entity is added into the world. This method is called after <see cref="M:Engine.EntitySystem.Entity.OnPostCreate(System.Boolean)"/> method.
            </summary>
            <param name="loaded"><b>true</b> if the entity has been loaded; otherwise, <b>false</b>.</param>
            <seealso cref="M:Engine.EntitySystem.Entity.PostCreate"/>
            <seealso cref="M:Engine.EntitySystem.Entity.OnPostCreate(System.Boolean)"/>
        </member>
        <member name="M:Engine.EntitySystem.Entity.OnDestroy">
            <summary>
            Called when the entity is removed from the world.
            </summary>
        </member>
        <member name="M:Engine.EntitySystem.Entity.OnAddChild(Engine.EntitySystem.Entity)">
            <summary>
            Called when the child is added.
            </summary>
            <param name="entity">The child entity.</param>
        </member>
        <member name="M:Engine.EntitySystem.Entity.OnRemoveChild(Engine.EntitySystem.Entity)">
            <summary>
            Called when the child is removed.
            </summary>
            <param name="entity">The child entity.</param>
        </member>
        <member name="M:Engine.EntitySystem.Entity.OnSetSimulation(System.Boolean)">
            <summary>
            Called when simulation of the world pause or continue.
            </summary>
            <param name="simulation"><b>true</b> if simulation continued. False if simulation paused.</param>
        </member>
        <member name="M:Engine.EntitySystem.Entity.OnTick">
            <summary>
            Called when has occured Tick in the world. 
            </summary>
            <remarks>
            <para>This method will be caused, only if the entity is signed on timer events. To subscribe for timer events it is possible by means of method <see cref="M:Engine.EntitySystem.Entity.AddTimer"/>.</para>
            </remarks>
            <seealso cref="M:Engine.EntitySystem.Entity.AddTimer"/>
            <seealso cref="M:Engine.EntitySystem.Entity.RemoveTimer"/>
            <seealso cref="P:Engine.EntitySystem.Entity.TickDelta"/>
            <seealso cref="E:Engine.EntitySystem.Entity.Tick"/>
            <seealso cref="P:Engine.EntitySystem.EntitySystemWorld.GameFPS"/>
            <seealso cref="P:Engine.EntitySystem.EntitySystemWorld.Simulation"/>
        </member>
        <member name="M:Engine.EntitySystem.Entity.AddTimer">
            <summary>
            Increases the counter of signing by timer events.
            </summary>
            <remarks>
            <para>If the counter is not becomes equal to zero timer events will be caused.</para>
            </remarks>
            <seealso cref="M:Engine.EntitySystem.Entity.RemoveTimer"/>
            <seealso cref="M:Engine.EntitySystem.Entity.OnTick"/>
            <seealso cref="P:Engine.EntitySystem.Entity.TickDelta"/>
            <seealso cref="E:Engine.EntitySystem.Entity.Tick"/>
            <seealso cref="P:Engine.EntitySystem.EntitySystemWorld.GameFPS"/>
            <seealso cref="P:Engine.EntitySystem.EntitySystemWorld.Simulation"/>
        </member>
        <member name="M:Engine.EntitySystem.Entity.RemoveTimer">
            <summary>
            Reduces the counter of signing by timer events.
            </summary>
            <remarks>
            <para>If the counter becomes equal to zero timer events will not be caused.</para>
            </remarks>
            <seealso cref="M:Engine.EntitySystem.Entity.AddTimer"/>
            <seealso cref="M:Engine.EntitySystem.Entity.OnTick"/>
            <seealso cref="P:Engine.EntitySystem.Entity.TickDelta"/>
            <seealso cref="E:Engine.EntitySystem.Entity.Tick"/>
            <seealso cref="P:Engine.EntitySystem.EntitySystemWorld.GameFPS"/>
            <seealso cref="P:Engine.EntitySystem.EntitySystemWorld.Simulation"/>
        </member>
        <member name="M:Engine.EntitySystem.Entity.OnRelationshipAdd(Engine.EntitySystem.Entity)">
            <summary>
            Called when between entities relationship is added.
            </summary>
            <param name="entity">Entity which is connected with the given entity.</param>
            <seealso cref="M:Engine.EntitySystem.Entity.AddRelationship(Engine.EntitySystem.Entity)"/>
            <seealso cref="M:Engine.EntitySystem.Entity.RemoveRelationship(Engine.EntitySystem.Entity)"/>
            <seealso cref="M:Engine.EntitySystem.Entity.OnRelatedEntityDelete(Engine.EntitySystem.Entity)"/>
            <seealso cref="M:Engine.EntitySystem.Entity.OnRelationshipRemove(Engine.EntitySystem.Entity)"/>
            <seealso cref="E:Engine.EntitySystem.Entity.RelatedEntityDelete"/>
        </member>
        <member name="M:Engine.EntitySystem.Entity.OnRelationshipRemove(Engine.EntitySystem.Entity)">
            <summary>
            Called when between entities relationship is removed.
            </summary>
            <param name="entity">Entity which is connected with the given entity.</param>
            <seealso cref="M:Engine.EntitySystem.Entity.AddRelationship(Engine.EntitySystem.Entity)"/>
            <seealso cref="M:Engine.EntitySystem.Entity.RemoveRelationship(Engine.EntitySystem.Entity)"/>
            <seealso cref="M:Engine.EntitySystem.Entity.OnRelatedEntityDelete(Engine.EntitySystem.Entity)"/>
            <seealso cref="M:Engine.EntitySystem.Entity.OnRelationshipAdd(Engine.EntitySystem.Entity)"/>
            <seealso cref="E:Engine.EntitySystem.Entity.RelatedEntityDelete"/>
        </member>
        <member name="M:Engine.EntitySystem.Entity.OnRelatedEntityDelete(Engine.EntitySystem.Entity)">
            <summary>
            Called when the entity related with this entity is deleted.
            </summary>
            <param name="entity">The deleted entity.</param>
            <seealso cref="M:Engine.EntitySystem.Entity.AddRelationship(Engine.EntitySystem.Entity)"/>
            <seealso cref="M:Engine.EntitySystem.Entity.RemoveRelationship(Engine.EntitySystem.Entity)"/>
            <seealso cref="M:Engine.EntitySystem.Entity.OnRelationshipAdd(Engine.EntitySystem.Entity)"/>
            <seealso cref="M:Engine.EntitySystem.Entity.OnRelationshipRemove(Engine.EntitySystem.Entity)"/>
            <seealso cref="E:Engine.EntitySystem.Entity.RelatedEntityDelete"/>
        </member>
        <member name="M:Engine.EntitySystem.Entity.OnLoad(Engine.Utils.TextBlock)">
            <summary>
            Called while entity type is loading.
            </summary>
            <param name="block">The text block from which data of entity will be loaded.</param>
            <returns><b>true</b> if the entity successfully loaded; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Engine.EntitySystem.Entity.OnSave(Engine.Utils.TextBlock)">
            <summary>
            Called while entity type is saving.
            </summary>
            <param name="block">The text block in which data of entity will be saved.</param>
        </member>
        <member name="M:Engine.EntitySystem.Entity.ToString">
            <summary>
            Returns a string containing the type name and name of the entity.
            </summary>
            <returns>A string containing the type class name and name of the entity.</returns>
        </member>
        <member name="M:Engine.EntitySystem.Entity.CloneWithCopyBrowsableProperties(System.Boolean,Engine.EntitySystem.Entity)">
            <summary>
            Creates a new entity that is a copy of the current instance. Copying only browsable properties.
            </summary>
            <param name="cloneChildren">Whether to clone children of entity.</param>
            <param name="clonedParent">The parameter sets the parent for the cloned entity.</param>
            <returns>A new entity that is a copy of this instance.</returns>
        </member>
        <member name="M:Engine.EntitySystem.Entity.CloneWithCopyBrowsableProperties(System.Boolean)">
            <summary>
            Creates a new entity that is a copy of the current instance. Copying only browsable properties.
            </summary>
            <param name="cloneChildren">Whether to clone children of entity.</param>
            <returns>A new entity that is a copy of this instance.</returns>
        </member>
        <member name="M:Engine.EntitySystem.Entity.OnClone(Engine.EntitySystem.Entity)">
            <summary>
            Called when the entity is cloned.
            </summary>
            <param name="source">Entity with source data.</param>
        </member>
        <member name="M:Engine.EntitySystem.Entity.OnGetEditorShowInformation">
            <summary>
            To receive the line information which will be shown in Map Editor when entity it is selected.
            </summary>
            <returns>Returns information string.</returns>
        </member>
        <member name="M:Engine.EntitySystem.Entity.OnEditorGetStaticToolBarExpandedIcons(System.Collections.Generic.List{Engine.EntitySystem.EditorToolBarExpandedItem})">
            <summary>
            Called when Map Editor fills toolbar expanded icons.
            </summary>
            <param name="list">The list of items.</param>
        </member>
        <member name="P:Engine.EntitySystem.Entity.Type">
            <summary>
            Gets the entity type.
            </summary>
            <remarks>
            <para>Each entity has the type.</para>
            </remarks>
        </member>
        <member name="P:Engine.EntitySystem.Entity.Parent">
            <summary>
            Gets the parent of entity.
            </summary>
            <remarks>
            Each entity has the parent, except for object of class <see cref="T:Engine.EntitySystem.World"/>.
            </remarks>
        </member>
        <member name="P:Engine.EntitySystem.Entity.UIN">
            <summary>
            Gets internal unique identifier.
            </summary>
        </member>
        <member name="P:Engine.EntitySystem.Entity.NetworkUIN">
            <summary>
            Gets internal unique network identifier.
            </summary>
        </member>
        <member name="P:Engine.EntitySystem.Entity.CreateTime">
            <summary>
            Gets create time.
            </summary>
        </member>
        <member name="P:Engine.EntitySystem.Entity.IsSetDeleted">
            <summary>
            Gets a value indicating whether the entity is deleted.
            </summary>
        </member>
        <member name="E:Engine.EntitySystem.Entity.NameChanged">
            <summary>
            Occurs when the name of entity is changed.
            </summary>
            <seealso cref="P:Engine.EntitySystem.Entity.Name"/>
            <seealso cref="P:Engine.EntitySystem.EntityType.AllowEmptyName"/>
        </member>
        <member name="P:Engine.EntitySystem.Entity.Name">
            <summary>
            Gets or sets the entity name.
            </summary>
            <remarks>
            <para>Name of each entity it is unique all over the world.</para>
            <para>The name can be empty if at entity type property <see cref="P:Engine.EntitySystem.EntityType.AllowEmptyName"/> is equal <b>true</b>.</para>
            </remarks>
            <seealso cref="P:Engine.EntitySystem.EntityType.AllowEmptyName"/>
        </member>
        <member name="P:Engine.EntitySystem.Entity.Children">
            <summary>
            Gets the list of children of the this entity. <b>Don't modify</b>.
            </summary>
        </member>
        <member name="P:Engine.EntitySystem.Entity.IsPostCreated">
            <summary>
            Gets a value indicating whether the entity in the world is added.
            </summary>
        </member>
        <member name="P:Engine.EntitySystem.Entity.LogicClass">
            <summary>
            Gets or sets the logic class of logic system.
            </summary>
            <remarks>
            <para>At the class set, it will be created logic object. If the object already has been created, old will be deleted.</para>
            </remarks>
        </member>
        <member name="E:Engine.EntitySystem.Entity.Create">
            <summary>
            Occurs after the entity is created in the world.
            </summary>
            <remarks>
            <para>This event is not occured if the entity is loaded.</para>
            </remarks>
            <seealso cref="M:Engine.EntitySystem.Entity.OnCreate"/>
            <seealso cref="M:Engine.EntitySystem.Entity.PostCreate"/>
        </member>
        <member name="E:Engine.EntitySystem.Entity.PostCreated">
            <summary>
            Occurs after the object is added in the world.
            </summary>
            <seealso cref="M:Engine.EntitySystem.Entity.PostCreate"/>
            <seealso cref="M:Engine.EntitySystem.Entity.OnPostCreate(System.Boolean)"/>
        </member>
        <member name="E:Engine.EntitySystem.Entity.Destroying">
            <summary>
            Occurs before the entity will be removed from the world.
            </summary>
        </member>
        <member name="E:Engine.EntitySystem.Entity.Tick">
            <summary>
            Occurs when has occured Tick in the world. 
            </summary>
            <remarks>
            <para>There is no necessity to subscribe for notifications of ticks. It is made automatic for this event.</para>
            </remarks>
            <seealso cref="M:Engine.EntitySystem.Entity.AddTimer"/>
            <seealso cref="M:Engine.EntitySystem.Entity.RemoveTimer"/>
            <seealso cref="M:Engine.EntitySystem.Entity.OnTick"/>
            <seealso cref="P:Engine.EntitySystem.Entity.TickDelta"/>
            <seealso cref="P:Engine.EntitySystem.EntitySystemWorld.GameFPS"/>
            <seealso cref="P:Engine.EntitySystem.EntitySystemWorld.Simulation"/>
        </member>
        <member name="E:Engine.EntitySystem.Entity.RelatedEntityDelete">
            <summary>
            Occurs when when the entity related with this entity is deleted.
            </summary>
            <seealso cref="M:Engine.EntitySystem.Entity.AddRelationship(Engine.EntitySystem.Entity)"/>
            <seealso cref="M:Engine.EntitySystem.Entity.RemoveRelationship(Engine.EntitySystem.Entity)"/>
            <seealso cref="M:Engine.EntitySystem.Entity.OnRelatedEntityDelete(Engine.EntitySystem.Entity)"/>
            <seealso cref="M:Engine.EntitySystem.Entity.OnRelationshipAdd(Engine.EntitySystem.Entity)"/>
            <seealso cref="M:Engine.EntitySystem.Entity.OnRelationshipRemove(Engine.EntitySystem.Entity)"/>
        </member>
        <member name="P:Engine.EntitySystem.Entity.TickDelta">
            <summary>
            Receives constant time inverted game fps.
            </summary>
            <remarks>
            <para>This value is constant during simulation.</para>
            <para>This value is equal 1 / <see cref="P:Engine.EntitySystem.EntitySystemWorld.GameFPS"/>.</para>
            </remarks>
            <seealso cref="M:Engine.EntitySystem.Entity.AddTimer"/>
            <seealso cref="M:Engine.EntitySystem.Entity.RemoveTimer"/>
            <seealso cref="M:Engine.EntitySystem.Entity.OnTick"/>
            <seealso cref="E:Engine.EntitySystem.Entity.Tick"/>
            <seealso cref="P:Engine.EntitySystem.EntitySystemWorld.GameFPS"/>
            <seealso cref="P:Engine.EntitySystem.EntitySystemWorld.Simulation"/>
        </member>
        <member name="P:Engine.EntitySystem.Entity.UserData">
            <summary>
            Gets or sets the user data that contains data about the entity. 
            </summary>
        </member>
        <member name="P:Engine.EntitySystem.Entity.TextUserData">
            <summary>
            Gets or sets the user data that contains data about the entity. 
            </summary>
        </member>
        <member name="P:Engine.EntitySystem.Entity.AllowSave">
            <summary>
            Gets or sets a value indicating whether the entity will be saved at map save.
            </summary>
            <remarks>
            <para>This parameter is convenient, when the entity is dependent on another, and each time is created at the main entity.</para>
            </remarks>
        </member>
        <member name="P:Engine.EntitySystem.Entity.EditorSelectable">
            <summary>
            Gets or sets a value indicating whether opportunity to select entity in the Map Editor.
            </summary>
            <remarks>
            This parameter is convenient, when the entity is dependent on another, and each time is created at the main entity.
            </remarks>
        </member>
        <member name="P:Engine.EntitySystem.Entity.LogicObject">
            <summary>
            Gets the current logic object of logic system.
            </summary>
        </member>
        <member name="P:Engine.EntitySystem.Entity.LoadingTextBlock">
            <summary>
            Gets the loading text block of serialized entity.
            </summary>
            <remarks>
            <para>
            This values equal to <b>block</b> parameter of <see cref="M:Engine.EntitySystem.Entity.OnLoad(Engine.Utils.TextBlock)"/>.
            </para>
            <para>
            This property actual from calling <see cref="M:Engine.EntitySystem.Entity.OnLoad(Engine.Utils.TextBlock)"/> and 
            inclusive up to <see cref="M:Engine.EntitySystem.Entity.OnPostCreate2(System.Boolean)"/>.
            </para>
            <para>
            Warning! You can't use the <see cref="M:Engine.EntitySystem.Entities.GetLoadingEntityBySerializedUIN(System.UInt32)"/> 
            for loading references for entities after <see cref="M:Engine.EntitySystem.Entity.OnLoad(Engine.Utils.TextBlock)"/>.
            </para>
            </remarks>
        </member>
        <member name="T:Engine.EntitySystem.Entity.FieldSerializeAttribute">
            <summary>
            Specifies that a field will be serialized. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Engine.EntitySystem.Entity.FieldSerializeAttribute.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <remarks>
            The property name will be taken by Reflection from property. If it will be used obfuscator there can be problems with renamed names of properties later.
            </remarks>
        </member>
        <member name="M:Engine.EntitySystem.Entity.FieldSerializeAttribute.#ctor(System.String,Engine.EntitySystem.Entity.FieldSerializeSerializationTypes)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="propertyName">The property name.</param>
            <param name="supportedSerializationTypes">The supported serialization types.</param>
        </member>
        <member name="M:Engine.EntitySystem.Entity.FieldSerializeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="propertyName">The property name.</param>
        </member>
        <member name="M:Engine.EntitySystem.Entity.FieldSerializeAttribute.#ctor(Engine.EntitySystem.Entity.FieldSerializeSerializationTypes)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="supportedSerializationTypes">The supported serialization types.</param>
        </member>
        <member name="P:Engine.EntitySystem.Entity.FieldSerializeAttribute.PropertyName">
            <summary>
            Gets the property name.
            </summary>
        </member>
        <member name="T:Engine.EntitySystem.Entity.NameChangedDelegate">
            <summary>
            Represents the method that handles a <see cref="E:Engine.EntitySystem.Entity.NameChanged"/> event.
            </summary>
            <param name="entity">The source of the event.</param>
        </member>
        <member name="T:Engine.EntitySystem.Entity.CreateDelegate">
            <summary>
            Represents the method that handles a <see cref="E:Engine.EntitySystem.Entity.Create"/> event.
            </summary>
            <param name="entity">The source of the event.</param>
        </member>
        <member name="T:Engine.EntitySystem.Entity.PostCreateDelegate">
            <summary>
            Represents the method that handles a <see cref="E:Engine.EntitySystem.Entity.PostCreated"/> event.
            </summary>
            <param name="entity">The source of the event.</param>
            <param name="loaded"><b>true</b> if the entity has been loaded; otherwise, <b>false</b>.</param>
        </member>
        <member name="T:Engine.EntitySystem.Entity.DestroyingDelegate">
            <summary>
            Represents the method that handles a <see cref="E:Engine.EntitySystem.Entity.Destroying"/> event.
            </summary>
            <param name="entity">The source of the event.</param>
        </member>
        <member name="T:Engine.EntitySystem.Entity.TickDelegate">
            <summary>
            Represents the method that handles a <see cref="E:Engine.EntitySystem.Entity.Tick"/> event.
            </summary>
            <param name="entity">The source of the event.</param>
        </member>
        <member name="T:Engine.EntitySystem.Entity.RelatedEntityDeleteDelegate">
            <summary>
            Represents the method that handles a <see cref="E:Engine.EntitySystem.Entity.RelatedEntityDelete"/> event.
            </summary>
            <param name="entity">The source of the event.</param>
            <param name="deletedEntity">The deleted entity.</param>
        </member>
        <member name="T:Engine.EntitySystem.LogicClass">
            <summary>
            Defines the logic class of logic system.
            </summary>
        </member>
        <member name="M:Engine.EntitySystem.LogicClass.OnRemoveChild(Engine.EntitySystem.Entity)">
            <summary>
            Called when the child is removed.
            </summary>
            <param name="entity">The child entity.</param>
        </member>
        <member name="M:Engine.EntitySystem.LogicClass.ToString">
            <summary>
            Returns the class name.
            </summary>
            <returns>The class name.</returns>
        </member>
        <member name="P:Engine.EntitySystem.LogicClass.ClassName">
            <summary>
            Gets or sets the class name.
            </summary>
        </member>
        <member name="M:Engine.EntitySystem.LogicSystem.LogicAction.GetChildBrowsableItems">
            <summary>
            Don't modify
            items - LogicAction or string
            </summary>
            <returns></returns>
        </member>
        <member name="P:Engine.EntitySystem.LogicSystem.LogicCallMethodAction.ParameterActions">
            <summary>
            Don't modify
            </summary>
        </member>
        <member name="T:Engine.EntitySystem.EditorToolBarExpandedItem">
            <summary>
            Defines the tool bar expanded icon item in the Map Editor.
            </summary>
        </member>
        <member name="M:Engine.EntitySystem.EditorToolBarExpandedItem.#ctor(Engine.EntitySystem.Entity,System.Drawing.Image,System.String,System.Int32,System.EventHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:Engine.EntitySystem.EditorToolBarExpandedItem"/> class.
            </summary>
            <param name="owner">The owner entity of the item.</param>
            <param name="image">The image of the item.</param>
            <param name="text">The text of the item.</param>
            <param name="sortIndex">The sort index of item.</param>
            <param name="clickEventHandler">The click event handler.</param>
        </member>
        <member name="P:Engine.EntitySystem.EditorToolBarExpandedItem.Owner">
            <summary>
            Gets the owner entity of the item.
            </summary>
        </member>
        <member name="P:Engine.EntitySystem.EditorToolBarExpandedItem.Image">
            <summary>
            Gets the image of the item.
            </summary>
        </member>
        <member name="P:Engine.EntitySystem.EditorToolBarExpandedItem.Text">
            <summary>
            Gets the text of the item.
            </summary>
        </member>
        <member name="P:Engine.EntitySystem.EditorToolBarExpandedItem.SortIndex">
            <summary>
            Gets the sort index of item.
            </summary>
        </member>
        <member name="P:Engine.EntitySystem.EditorToolBarExpandedItem.ClickEventHandler">
            <summary>
            Gets the click event handler.
            </summary>
        </member>
        <member name="T:Engine.EntitySystem.EntityExtendedProperties.FieldSerializeAttribute">
            <summary>
            Specifies that a field will be serialized. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Engine.EntitySystem.EntityExtendedProperties.FieldSerializeAttribute.#ctor">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <remarks>
            The property name will be taken by Reflection from property. If it will be used obfuscator there can be problems with renamed names of properties later.
            </remarks>
        </member>
        <member name="M:Engine.EntitySystem.EntityExtendedProperties.FieldSerializeAttribute.#ctor(System.String,Engine.EntitySystem.EntityExtendedProperties.FieldSerializeSerializationTypes)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="propertyName">The property name.</param>
            <param name="supportedSerializationTypes">The supported serialization types.</param>
        </member>
        <member name="M:Engine.EntitySystem.EntityExtendedProperties.FieldSerializeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="propertyName">The property name.</param>
        </member>
        <member name="M:Engine.EntitySystem.EntityExtendedProperties.FieldSerializeAttribute.#ctor(Engine.EntitySystem.EntityExtendedProperties.FieldSerializeSerializationTypes)">
            <summary>
            Initializes a new instance of the class.
            </summary>
            <param name="supportedSerializationTypes">The supported serialization types.</param>
        </member>
        <member name="P:Engine.EntitySystem.EntityExtendedProperties.FieldSerializeAttribute.PropertyName">
            <summary>
            Gets the property name.
            </summary>
        </member>
        <member name="T:Engine.EntitySystem.EntityTypes">
            <summary>
            Defines the entity types collection.
            </summary>
        </member>
        <member name="M:Engine.EntitySystem.EntityTypes.GetByName(System.String)">
            <summary>
            Finds the entity type by the name.
            </summary>
            <param name="name">The entity type name.</param>
            <returns>The entity type or <b>null</b>.</returns>
        </member>
        <member name="M:Engine.EntitySystem.EntityTypes.GetClassInfoByEntityClassName(System.String)">
            <summary>
            Finds the class information by the entity class name.
            </summary>
            <param name="entityClassName">The entity class name.</param>
            <returns>The class information or <b>null</b>..</returns>
        </member>
        <member name="M:Engine.EntitySystem.EntityTypes.FindByFilePath(System.String)">
            <summary>
            Finds the type on his file path.
            </summary>
            <param name="filePath">The file path.</param>
            <returns>The entity type or <b>null</b>.</returns>
        </member>
        <member name="M:Engine.EntitySystem.EntityTypes._ChangeAllReferencesToType(Engine.EntitySystem.EntityType,Engine.EntitySystem.EntityType)">
            <summary>
            Internal for the Resource Editor.
            </summary>
            <param name="type"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:Engine.EntitySystem.EntityTypes.GetTypesBasedOnClass(Engine.EntitySystem.EntityTypes.ClassInfo)">
            <summary>
            Returns the list of types which are based on set class information.
            </summary>
            <param name="classInfo">The class information.</param>
            <returns>The list of types which are based on set class information.</returns>
        </member>
        <member name="P:Engine.EntitySystem.EntityTypes.Instance">
            <summary>
            Gets an instance of the <see cref="T:Engine.EntitySystem.EntityTypes"/>.
            </summary>
        </member>
        <member name="P:Engine.EntitySystem.EntityTypes.Types">
            <summary>
            Gets the entity types list.
            </summary>
        </member>
        <member name="P:Engine.EntitySystem.EntityTypes.Classes">
            <summary>
            Gets the class informations list.
            </summary>
        </member>
        <member name="T:Engine.EntitySystem.EntityTypes.ClassInfo">
            <summary>
            Defines the class information of the entity type.
            </summary>
        </member>
        <member name="M:Engine.EntitySystem.EntityTypes.ClassInfo.ToString">
            <summary>
            Returns the entity class name.
            </summary>
            <returns>The entity class name.</returns>
        </member>
        <member name="P:Engine.EntitySystem.EntityTypes.ClassInfo.TypeClassType">
            <summary>
            Gets the entity type class.
            </summary>
        </member>
        <member name="P:Engine.EntitySystem.EntityTypes.ClassInfo.EntityClassType">
            <summary>
            Gets the entity class.
            </summary>
        </member>
        <member name="P:Engine.EntitySystem.EntityTypes.ClassInfo.BaseClassInfo">
            <summary>
            Gets the base class information.
            </summary>
        </member>
        <member name="P:Engine.EntitySystem.EntityTypes.ClassInfo._TypeAttributes">
            <summary>
            Don't modify
            </summary>
        </member>
        <member name="P:Engine.EntitySystem.EntityTypes.ClassInfo._EntityAttributes">
            <summary>
            Don't modify
            </summary>
        </member>
        <member name="T:Engine.EntitySystem.Entities">
            <summary>
            Defines management of a entities collection.
            </summary>
            <remarks>
            Instance it is a class it is created when method <see cref="M:Engine.EntitySystem.EntitySystemWorld.WorldCreate(Engine.EntitySystem.WorldSimulationTypes,Engine.EntitySystem.WorldType,Engine.EntitySystem.EntitySystemWorld.NetworkingInterface)"/> is called and 
            removed when method <see cref="M:Engine.EntitySystem.EntitySystemWorld.WorldDestroy"/> is called.
            </remarks>
        </member>
        <member name="M:Engine.EntitySystem.Entities.Create(Engine.EntitySystem.EntityType,Engine.EntitySystem.Entity)">
            <summary>
            Creates the new entity.
            </summary>
            <param name="type">The entity type.</param>
            <param name="parent">The entity parent.</param>
            <returns>The created entity.</returns>
            <example>This example shows creation of entity and his addition in the world.
            <code>
            MapObjectType objType = ..;
            MapObject obj = (MapObject)Entities.Instance.Create( objType, Map.Instance );
            obj.Position = new Vec3( 0, 0, 10 );
            obj.PostCreate();
            </code>
            </example>
            <seealso cref="M:Engine.EntitySystem.Entity.PostCreate"/>
            <seealso cref="M:Engine.EntitySystem.Entities.Create(System.String,Engine.EntitySystem.Entity)"/>
        </member>
        <member name="M:Engine.EntitySystem.Entities.Create(System.String,Engine.EntitySystem.Entity)">
            <summary>
            Creates the new entity.
            </summary>
            <param name="typeName">The entity type name.</param>
            <param name="parent">The entity parent.</param>
            <returns>The created entity.</returns>
            <example>This example shows creation of entity and his addition in the world.
            <code>
            MapObject obj = (MapObject)Entities.Instance.Create( "Box", Map.Instance );
            obj.Position = new Vec3( 0, 0, 10 );
            obj.PostCreate();
            </code>
            </example>
            <seealso cref="M:Engine.EntitySystem.Entity.PostCreate"/>
            <seealso cref="M:Engine.EntitySystem.Entities.Create(Engine.EntitySystem.EntityType,Engine.EntitySystem.Entity)"/>
        </member>
        <member name="M:Engine.EntitySystem.Entities.CompleteEntityDelete(Engine.EntitySystem.Entity)">
            <summary>
            Completely entity deletion. This method should be used only from editors.
            </summary>
            <param name="entity">The entity.</param>
            <remarks>
            When method <see cref="M:Engine.EntitySystem.Entity.SetDeleted"/> is used, the object is not destroyed at once.
            He is moving to the queue for deletion.
            It is necessary to not break work when there is a removal of entity through itself.
            </remarks>
        </member>
        <member name="M:Engine.EntitySystem.Entities.CompressUINs">
            <summary>
            Carries out a compression of unique identifiers of entities.
            </summary>
            <remarks>
            It is a method it is used before saving of maps that the UIN counter was minimal.
            </remarks>
        </member>
        <member name="M:Engine.EntitySystem.Entities.DeleteEntitiesMarkedForDeletion">
            <summary>
            Completely deletes entities which are moved to the queue for deletion.
            </summary>
            <remarks>
            Entities for which method <see cref="M:Engine.EntitySystem.Entity.SetDeleted"/> is called are moved in the queue. 
            To remove them completely periodically the given method is called.
            </remarks>
        </member>
        <member name="M:Engine.EntitySystem.Entities._WriteEntityTreeToTextBlock(Engine.EntitySystem.Entity,Engine.Utils.TextBlock)">
            <summary>
            Internal for Map System.
            </summary>
            <param name="entity">The root entity to write.</param>
            <param name="block">The text block for write.</param>
        </member>
        <member name="M:Engine.EntitySystem.Entities.GetByName(System.String)">
            <summary>
            Returns the entity by name.
            </summary>
            <param name="name">The entity name.</param>
            <returns>The entity.</returns>
        </member>
        <member name="M:Engine.EntitySystem.Entities.GetUniqueName(System.String)">
            <summary>
            Returns the generated the unique entity name with prefix.
            </summary>
            <param name="prefix">The name prefix.</param>
            <returns>The generated unique the entity name with prefix.</returns>
        </member>
        <member name="M:Engine.EntitySystem.Entities.GetLoadingEntityBySerializedUIN(System.UInt32)">
            <summary>
            Get loading entity by serialized uin.
            </summary>
            <param name="uin">The serialized uin.</param>
            <returns>The loading entity.</returns>
        </member>
        <member name="M:Engine.EntitySystem.Entities._InitUINOffset">
            <summary>
            Currenly only for Map System.
            </summary>
        </member>
        <member name="P:Engine.EntitySystem.Entities.Instance">
            <summary>
            Gets an instance of the <see cref="T:Engine.EntitySystem.Entities"/>.
            </summary>
        </member>
        <member name="P:Engine.EntitySystem.Entities.TickTime">
            <summary>
            Gets the current time of simulation.
            </summary>
        </member>
        <member name="P:Engine.EntitySystem.Entities.EntitiesCollection">
            <summary>
            Gets the entities collection.
            </summary>
        </member>
        <member name="E:Engine.EntitySystem.Entities.CreateEntity">
            <summary>
            Occurs when the new entity is created.
            </summary>
        </member>
        <member name="E:Engine.EntitySystem.Entities.DeleteEntity">
            <summary>
            Occurs when the entity is deleted.
            </summary>
        </member>
        <member name="P:Engine.EntitySystem.Entities.TickDelta">
            <summary>
            Receives constant time inverted game fps.
            </summary>
            <remarks>
            <para>This value is constant during simulation.</para>
            <para>This value is equal 1 / <see cref="P:Engine.EntitySystem.EntitySystemWorld.GameFPS"/>.</para>
            </remarks>
            <seealso cref="M:Engine.EntitySystem.Entity.AddTimer"/>
            <seealso cref="M:Engine.EntitySystem.Entity.RemoveTimer"/>
            <seealso cref="M:Engine.EntitySystem.Entity.OnTick"/>
            <seealso cref="E:Engine.EntitySystem.Entity.Tick"/>
            <seealso cref="P:Engine.EntitySystem.EntitySystemWorld.GameFPS"/>
            <seealso cref="P:Engine.EntitySystem.EntitySystemWorld.Simulation"/>
        </member>
        <member name="T:Engine.EntitySystem.Entities.CreateDeleteEntityDelegate">
            <summary>
            Represents the method that handles a <see cref="E:Engine.EntitySystem.Entities.CreateEntity"/> and <see cref="E:Engine.EntitySystem.Entities.DeleteEntity"/> event.
            </summary>
            <param name="entity">The source of the event.</param>
        </member>
        <member name="T:Engine.EntitySystem.EntityNetworkTypes">
            <summary>
            Specifies the network type of the entity.
            </summary>
        </member>
        <member name="F:Engine.EntitySystem.EntityNetworkTypes.NotSynchronized">
            <summary>
            Entities of this type can be exist on the server and the client, but never will 
            be synchronized.
            </summary>
        </member>
        <member name="F:Engine.EntitySystem.EntityNetworkTypes.ServerOnly">
            <summary>
            Entities of this type exist only on a server.
            </summary>
        </member>
        <member name="F:Engine.EntitySystem.EntityNetworkTypes.ClientOnly">
            <summary>
            Entities of this type exist only on a client.
            </summary>
        </member>
        <member name="F:Engine.EntitySystem.EntityNetworkTypes.Synchronized">
            <summary>
            Entities of this type exist on the server and the client and it properties 
            will be synchronized. Only entities of this type are synchronized between 
            the server and clients.
            </summary>
        </member>
        <member name="P:Engine.EntitySystem.LogicMethod.Parameters">
            <summary>
            Don't modify
            </summary>
        </member>
        <member name="M:Engine.EntitySystem.MapEditorInterface.SelectEntities(Engine.EntitySystem.Entity[])">
            <summary>
            To select the list of entities in the Map Editor.
            </summary>
            <param name="entities">The array of entities.</param>
        </member>
        <member name="M:Engine.EntitySystem.MapEditorInterface.GetSelectedEntities">
            <summary>
            Gets selected entities list in the Map Editor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Engine.EntitySystem.MapEditorInterface.GetCurrentCreatingEntity">
            <summary>
            Returns the current creating entity in the Map Editor.
            </summary>
            <returns>The current creating entity in the Map Editor.</returns>
        </member>
        <member name="P:Engine.EntitySystem.MapEditorInterface.FunctionalityArea">
            <summary>
            Gets or sets the current Map Editor functionality area.
            </summary>
        </member>
        <member name="T:Engine.EntitySystem.LogicSystem.LogicEntityObject">
            <summary>
            Defines the logic object of logic system.
            </summary>
        </member>
        <member name="T:Engine.EntitySystem.LogicClassManager">
            <summary>
            Defines the logic class manager.
            </summary>
        </member>
        <member name="M:Engine.EntitySystem.LogicClassManager.GetByName(System.String)">
            <summary>
            Returns the logic class by name.
            </summary>
            <param name="className">The class name.</param>
            <returns>The logic class</returns>
        </member>
        <member name="M:Engine.EntitySystem.LogicClassManager.OnRemoveChild(Engine.EntitySystem.Entity)">
            <summary>
            Called when the child is removed.
            </summary>
            <param name="entity">The child entity.</param>
        </member>
        <member name="P:Engine.EntitySystem.LogicClassManager.Classes">
            <summary>
            Gets the classes collection.
            </summary>
        </member>
        <member name="T:Engine.EntitySystem.LogicEntityClass">
            <summary>
            Defines the entity logic class of logic system.
            </summary>
        </member>
        <member name="M:Engine.EntitySystem.LogicEntityClass.ToString">
            <summary>
            Returns the class name.
            </summary>
            <returns>The class name.</returns>
        </member>
        <member name="T:Engine.EntitySystem.WorldSimulationTypes">
            <summary>
            Specifies the world simulation types.
            </summary>
        </member>
        <member name="F:Engine.EntitySystem.WorldSimulationTypes.DedicatedServer">
            <summary>
            The world of this type is created on a server. A network mode.
            </summary>
        </member>
        <member name="F:Engine.EntitySystem.WorldSimulationTypes.ServerAndClient">
            <summary>
            The world of this type is created on a server and working as client too. A network mode.
            </summary>
        </member>
        <member name="F:Engine.EntitySystem.WorldSimulationTypes.ClientOnly">
            <summary>
            The world of this type is created on a client. A network mode.
            </summary>
        </member>
        <member name="F:Engine.EntitySystem.WorldSimulationTypes.Single">
            <summary>
            The world of this type is created as a single simulation.
            </summary>
        </member>
        <member name="F:Engine.EntitySystem.WorldSimulationTypes.Editor">
            <summary>
            The world of this type is created in the Resource or Map Editors.
            </summary>
        </member>
        <member name="T:Engine.EntitySystem.EntitySystemWorld">
            <summary>
            Represents an entity system world.
            </summary>
        </member>
        <member name="M:Engine.EntitySystem.EntitySystemWorld.Init(Engine.EntitySystem.EntitySystemWorld)">
            <summary>
            Initialization new entity system world.
            </summary>
            <param name="overridedObject">
            Object which implement abstract methods of the given class.
            </param>
            <returns><b>true</b> if the object successfully initialized; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Engine.EntitySystem.EntitySystemWorld.Shutdown">
            <summary>
            Shutdown entity system world.
            </summary>
        </member>
        <member name="M:Engine.EntitySystem.EntitySystemWorld.OnLoadNotDefinedEntityType(System.String,System.String,Engine.EntitySystem.EntityType@,System.Boolean@)">
            <summary>
            Called when the demand entity type is not defined.
            </summary>
            <param name="entityTypeName">The demand entity type name.</param>
            <param name="entityClassName">The demand entity class name.</param>
            <param name="changedType">The new replaced entity type.</param>
            <param name="changeAllSameTypes">Whether to replace all similar entity types.</param>
            <returns><b>true</b> if the entity type replaced; otherwise, <b>false</b>.</returns>
            <remarks>
            This method is called at loading a map.
            </remarks>
        </member>
        <member name="M:Engine.EntitySystem.EntitySystemWorld.WorldCreate(Engine.EntitySystem.WorldSimulationTypes,Engine.EntitySystem.WorldType,Engine.EntitySystem.EntitySystemWorld.NetworkingInterface)">
            <summary>
            To create the new world. The old world will be destroyed.
            </summary>
            <param name="worldSimulationType">The world similation type.</param>
            <param name="worldType">The world type.</param>
            <param name="networkingInterface">The networking interface.</param>
            <returns><b>true</b> if the world successfully created; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Engine.EntitySystem.EntitySystemWorld.WorldCreate(Engine.EntitySystem.WorldSimulationTypes,Engine.EntitySystem.WorldType)">
            <summary>
            To create the new world. The old world will be destroyed.
            </summary>
            <param name="worldSimulationType">The world similation type.</param>
            <param name="worldType">The world type.</param>
            <returns><b>true</b> if the world successfully created; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Engine.EntitySystem.EntitySystemWorld.WorldDestroy">
            <summary>
            To destroy the existing world.
            </summary>
        </member>
        <member name="M:Engine.EntitySystem.EntitySystemWorld.Tick">
            <summary>
            To execute all ticks till current time of simulation.
            </summary>
        </member>
        <member name="M:Engine.EntitySystem.EntitySystemWorld.ResetExecutedTime">
            <summary>
            To reset current simulation time.
            </summary>
            <remarks>
            This method need call, after there was a long loading.
            This method is called, that the timer did not try to catch up with lagged behind time.
            </remarks>
        </member>
        <member name="M:Engine.EntitySystem.EntitySystemWorld.IsDedicatedServer">
            <summary>
            <b>true</b> if WorldSimulationType == WorldSimulationTypes.DedicatedServer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Engine.EntitySystem.EntitySystemWorld.IsServer">
            <summary>
            <b>true</b> if WorldSimulationType == WorldSimulationTypes.Server || 
            WorldSimulationType == WorldSimulationTypes.ServerAndClient
            </summary>
            <returns></returns>
        </member>
        <member name="M:Engine.EntitySystem.EntitySystemWorld.IsClientOnly">
            <summary>
            <b>true</b> if WorldSimulationType == WorldSimulationTypes.ClientOnly
            </summary>
            <returns></returns>
        </member>
        <member name="M:Engine.EntitySystem.EntitySystemWorld.IsSingle">
            <summary>
            <b>true</b> if WorldSimulationType == WorldSimulationTypes.Single;
            </summary>
            <returns></returns>
        </member>
        <member name="M:Engine.EntitySystem.EntitySystemWorld.IsEditor">
            <summary>
            <b>true</b> if WorldSimulationType == WorldSimulationTypes.Editor;
            </summary>
            <returns></returns>
        </member>
        <member name="P:Engine.EntitySystem.EntitySystemWorld.Instance">
            <summary>
            Gets an instance of the <see cref="T:Engine.EntitySystem.EntitySystemWorld"/>.
            </summary>
        </member>
        <member name="P:Engine.EntitySystem.EntitySystemWorld.Simulation">
            <summary>
            Gets or sets a value indicating whether the simulation is enabled.
            </summary>
            <seealso cref="M:Engine.EntitySystem.Entity.AddTimer"/>
            <seealso cref="M:Engine.EntitySystem.Entity.RemoveTimer"/>
            <seealso cref="M:Engine.EntitySystem.Entity.OnTick"/>
            <seealso cref="P:Engine.EntitySystem.Entity.TickDelta"/>
            <seealso cref="E:Engine.EntitySystem.Entity.Tick"/>
            <seealso cref="P:Engine.EntitySystem.EntitySystemWorld.GameFPS"/>
        </member>
        <member name="P:Engine.EntitySystem.EntitySystemWorld.GameFPS">
            <summary>
            Receives constant time game fps.
            </summary>
            <remarks>
            <para>This value is constant during simulation.</para>
            <para>This value is equal 1 / <see cref="P:Engine.EntitySystem.Entity.TickDelta"/>.</para>
            </remarks>
            <seealso cref="M:Engine.EntitySystem.Entity.AddTimer"/>
            <seealso cref="M:Engine.EntitySystem.Entity.RemoveTimer"/>
            <seealso cref="M:Engine.EntitySystem.Entity.OnTick"/>
            <seealso cref="P:Engine.EntitySystem.Entity.TickDelta"/>
            <seealso cref="E:Engine.EntitySystem.Entity.Tick"/>
            <seealso cref="P:Engine.EntitySystem.EntitySystemWorld.Simulation"/>
        </member>
        <member name="P:Engine.EntitySystem.EntitySystemWorld.WorldSimulationType">
            <summary>
            Gets the world simulation type.
            </summary>
        </member>
        <member name="P:Engine.EntitySystem.EntitySystemWorld.DefaultWorldType">
            <summary>
            You can specify this value in the EntitySystem.config. "defaultWorldType" attribute.
            </summary>
        </member>
        <member name="T:Engine.EntitySystem.WorldType">
            <summary>
            Defines the <see cref="T:Engine.EntitySystem.World"/> entity type.
            </summary>
        </member>
        <member name="T:Engine.EntitySystem.World">
            <summary>
            Defines the top entity class in the map hierarchy.
            </summary>
        </member>
        <member name="M:Engine.EntitySystem.World.OnLoad(Engine.Utils.TextBlock)">
            <summary>
            Called while entity type is loading.
            </summary>
            <param name="block">The text block from which data of entity will be loaded.</param>
            <returns><b>true</b> if the entity successfully loaded; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Engine.EntitySystem.World.OnSave(Engine.Utils.TextBlock)">
            <summary>
            Called while entity type is saving.
            </summary>
            <param name="block">The text block in which data of entity will be saved.</param>
        </member>
        <member name="M:Engine.EntitySystem.World.OnPostCreate(System.Boolean)">
            <summary>
            Called after the entity is added into the world.
            </summary>
            <param name="loaded"><b>true</b> if the entity has been loaded; otherwise, <b>false</b>.</param>
        </member>
        <member name="M:Engine.EntitySystem.World.OnDestroy">
            <summary>
            Called when the entity is removed from the world.
            </summary>
        </member>
        <member name="M:Engine.EntitySystem.World.OnRelatedEntityDelete(Engine.EntitySystem.Entity)">
            <summary>
            Called when the entity related with this entity is deleted.
            </summary>
            <param name="entity">The deleted entity.</param>
            <seealso cref="M:Engine.EntitySystem.Entity.AddRelationship(Engine.EntitySystem.Entity)"/>
            <seealso cref="M:Engine.EntitySystem.Entity.RemoveRelationship(Engine.EntitySystem.Entity)"/>
            <seealso cref="M:Engine.EntitySystem.Entity.OnRelationshipAdd(Engine.EntitySystem.Entity)"/>
            <seealso cref="M:Engine.EntitySystem.Entity.OnRelationshipRemove(Engine.EntitySystem.Entity)"/>
            <seealso cref="E:Engine.EntitySystem.Entity.RelatedEntityDelete"/>
        </member>
        <member name="P:Engine.EntitySystem.World.Type">
            <summary>
            Gets the entity type.
            </summary>
        </member>
        <member name="P:Engine.EntitySystem.World.Instance">
            <summary>
            Gets an instance of the <see cref="T:Engine.EntitySystem.World"/>.
            </summary>
        </member>
        <member name="P:Engine.EntitySystem.World.Random">
            <summary>
            Gets the random number generator.
            </summary>
            <remarks>
            It is recommended to use this generator for work within under entity system objects.
            For convenience this generator is in class <see cref="T:Engine.EntitySystem.World"/> since he is always unique.
            </remarks>
        </member>
    </members>
</doc>
